"""
Django settings for prodtool project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

PRODUCTION = False

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "vy-7c7q!f%-&*cx^_sqrk1lrh)yke)0pyfl=sb=$qd@_(*33y$"
CLOUDWATCH_EVENT_SECRET = "337500dd-fee5-4f95-b94f-fa44cc6c6637"

MAILGUN_API_KEY = "IMNOTSECRET"

SEGMENT_WRITE_KEY = "IMNOTSECRET"
SEGMENT_WEBHOOK_SHARED_SECRET = "IMNOTSECRET"

STRIPE_API_KEY = "IMNOTSECRET"
STRIPE_ENDPOINT_SECRET = "IMNOTSECRET"
STRIPE_PUBLISHABLE_KEY = "IMNOTSECRET"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "km.pagekite.me",
    "127.0.0.1",
    "localhost",
    "ryan-prodtool.ngrok.io",
    "pm-kareem.ngrok.io",
    "comitis.serveo.net",
]

APP_URL = 'http://localhost:8000'

# For Debug toolbar
INTERNAL_IPS = [
    "127.0.0.1",
]

ADMINS = [
    ("Ryan", "ryan@savio.io"),
    ("Kareem", "k@savio.io"),
]

# Disable SameSite cookie checking so server will accept sessionid cookie
# from chrome extension
SESSION_COOKIE_SAMESITE = None
CSRF_COOKIE_SAMESITE = None

# Application definition
AUTH_USER_MODEL = "accounts.User"

INSTALLED_APPS = [
    "marketing.apps.MarketingConfig",
    "accounts.apps.AccountsConfig",
    "feedback.apps.FeedbackConfig",
    "appaccounts.apps.AppAccountsConfig",
    "integrations.apps.IntegrationsConfig",
    "dummydata.apps.DummydataConfig",
    "internal_analytics.apps.InternalAnalyticsConfig",
    "guides.apps.GuidesConfig",
    "sharedwidgets.apps.SharedWidgetsConfig",
    "marketingmonitor.apps.MarketingmonitorConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "dal",  # django-autocomplete-light
    "dal_select2",
    "crispy_forms",
    "widget_tweaks",
    "djcelery_email",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django.contrib.humanize",
    "debug_toolbar",
    "django.contrib.sitemaps",
]

CRISPY_TEMPLATE_PACK = "bootstrap4"

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "accounts.middleware.PayOrNoAccessMiddleware",
    "marketing.middleware.TrackRefererMiddleware",
]

ROOT_URLCONF = "prodtool.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates"),],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "prodtool.context_processors.exposed_settings",
                "prodtool.context_processors.getvars",
                "dummydata.context_processors.has_dummy_data",
                "accounts.context_processors.onboarding_status",
            ],
        },
    },
]

WSGI_APPLICATION = "prodtool.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "prodtool",
        "USER": "postgres",
        "PASSWORD": "",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "KEY_PREFIX": "development",
    }
}

EMAIL_BACKEND = "djcelery_email.backends.CeleryEmailBackend"
EMAIL_DOMAIN = "http://localhost:8001"
EMAIL_PORT = 9025
DEFAULT_FROM_EMAIL = "Savio <support@savio.io>"

CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["json", "pickle"]
CELERY_TASK_ROUTES = {
    # With this setup we'll have two queue:
    # 'import_worker' for our long running import tasks and
    # 'celery' which is the default queue. Everything else
    # will end up there. We could do fancier stuff.
    # NB: you also need to look in 15_daemonize_celery.config
    # to add a worker process for each queue.
    # See https://hackernoon.com/using-celery-with-multiple-queues-retries-and-scheduled-tasks-589fe9a4f9ba
    "feedback.tasks.import_feedback": {"queue": "import_worker"},
}

LOGIN_URL = "/app/accounts/login/"
LOGOUT_REDIRECT_URL = "marketing-home"

INTERCOM_APP_ID = "evbbipwt"
INTERCOM_CLIENT_ID = "IM_NOT_SECRET"
INTERCOM_CLIENT_SECRET = "IM_NOT_SECRET"

SLACK_CLIENT_SECRET = "IM_NOT_SECRET"
SLACK_CLIENT_ID = "IM_NOT_SECRET"
SLACK_SIGNING_SECRET = "IM_NOT_SECRET"

HELPSCOUT_CLIENT_ID = "IM_NOT_SECRET"
HELPSCOUT_CLIENT_SECRET = "IM_NOT_SECRET"
HELPSCOUT_WEBHOOK_SIGNING_KEY = "IM_NOT_SECRET"

STORYBLOK_API_TOKEN = "IM_NOT_SECRET"

PLAN_TIERED = "plan_GwSV9PWY04hZ93"
PLAN_EARLY_ADOPTER_20_PER_USER = "plan_Ek0Ns9AhiBtR1o"
PLAN_SMB_49_PER_USER = "plan_GgYpcKU6ncOBVe"
PLAN_MID_99_PER_USER = "plan_Gh1Ya0ebnwkY54"

PLAN_1_USER_FREE = "price_1GxXnOCZ3jbVsfoGC0N3fx5e"
PLAN_3_USERS_25 = "price_1GxXnPCZ3jbVsfoGVEbjyVik"
PLAN_UNLIMITED_USERS_49 = "price_1GxXnPCZ3jbVsfoGz6P2AXi0"
PLAN_LIFETIME_APPSUMO_99 = "price_1Ha1i2CZ3jbVsfoGUPC3cRB5"

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "vendor"),
    os.path.join(BASE_DIR, "static"),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {"format": "{levelname} {message}", "style": "{",},
    },
    "filters": {"require_debug_true": {"()": "django.utils.log.RequireDebugTrue",},},
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "filters": ["require_debug_true"],
        },
        "events": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "filters": ["require_debug_true"],
        },
        "segment": {"handlers": ["console"], "level": "DEBUG", "propagate": True,},
    },
}

# Load local settings
try:
    from .local_settings import *  # noqa
except ImportError:
    pass
