"""
Django settings for prodtool project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# EB health check services uses the internal ip of the ec2 instance which will fail
# unless that ip is part of ALLOWED_HOSTS. The ip changes so we need to grab it
# dynamically.
# See: https://stackoverflow.com/questions/34428877/django-allowed-host-setting-for-elastic-beanstalk-instance-behind-elastic-load-b?noredirect=1&lq=1
import requests
import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import ignore_logger

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
PRODUCTION = True

sentry_sdk.init(
    dsn=os.environ["SENTRY_KEY"],
    integrations=[DjangoIntegration(), CeleryIntegration()],
)
ignore_logger("django.security.DisallowedHost")  # Avoid constant log spam

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]
CLOUDWATCH_EVENT_SECRET = os.environ["CLOUDWATCH_EVENT_SECRET"]

MAILGUN_API_KEY = os.environ["MAILGUN_API_KEY"]

SEGMENT_WRITE_KEY = os.environ["SEGMENT_WRITE_KEY"]
SEGMENT_WEBHOOK_SHARED_SECRET = os.environ["SEGMENT_WEBHOOK_SHARED_SECRET"]

STRIPE_API_KEY = os.environ["STRIPE_API_KEY"]
STRIPE_ENDPOINT_SECRET = os.environ["STRIPE_ENDPOINT_SECRET"]
STRIPE_PUBLISHABLE_KEY = os.environ["STRIPE_PUBLISHABLE_KEY"]

ALLOWED_HOSTS = [
    "www.savio.io",
    "savio.io",
    "prodtool-production-web.ipcch9mk7r.us-east-2.elasticbeanstalk.com",
]

ADMINS = [
    ("Ryan", "ryan@savio.io"),
    ("Kareem", "k@savio.io"),
]

try:
    internal_ip = requests.get("http://instance-data/latest/meta-data/local-ipv4").text
except requests.exceptions.ConnectionError:
    pass
else:
    ALLOWED_HOSTS.append(internal_ip)
del requests

HOST = "https://www.savio.io"
PREPEND_WWW = True

# Disable SameSite cookie checking so server will accept sessionid cookie
# from chrome extension
SESSION_COOKIE_SAMESITE = None
CSRF_COOKIE_SAMESITE = None

# We're terminating SSL with ELB.
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition
AUTH_USER_MODEL = "accounts.User"

INSTALLED_APPS = [
    "marketing.apps.MarketingConfig",
    "accounts.apps.AccountsConfig",
    "feedback.apps.FeedbackConfig",
    "appaccounts.apps.AppAccountsConfig",
    "integrations.apps.IntegrationsConfig",
    "dummydata.apps.DummydataConfig",
    "internal_analytics.apps.InternalAnalyticsConfig",
    "guides.apps.GuidesConfig",
    "sharedwidgets.apps.SharedWidgetsConfig",
    "marketingmonitor.apps.MarketingmonitorConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "dal",  # django-autocomplete-light
    "dal_select2",
    "crispy_forms",
    "widget_tweaks",
    "djcelery_email",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django.contrib.humanize",
    "django.contrib.sitemaps",
]

CRISPY_TEMPLATE_PACK = "bootstrap4"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "accounts.middleware.PayOrNoAccessMiddleware",
    "marketing.middleware.TrackRefererMiddleware",
]

ROOT_URLCONF = "prodtool.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates"),],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "prodtool.context_processors.exposed_settings",
                "prodtool.context_processors.getvars",
                "dummydata.context_processors.has_dummy_data",
                "accounts.context_processors.onboarding_status",
            ],
        },
    },
]

WSGI_APPLICATION = "prodtool.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["DB_NAME"],
        "USER": os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PASSWORD"],
        "HOST": os.environ["DB_HOST"],
        "PORT": "5432",
    }
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "KEY_PREFIX": "production",
    }
}

DEFAULT_FROM_EMAIL = "Savio <support@savio.io>"
EMAIL_DOMAIN = "https://www.savio.io"

EMAIL_BACKEND = "djcelery_email.backends.CeleryEmailBackend"
EMAIL_HOST = os.environ["EMAIL_HOST"]
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
EMAIL_USE_TLS = True

CELERY_BROKER_URL = "redis://prodtool.l1i6lb.0001.use2.cache.amazonaws.com:6379/0"
CELERY_ACCEPT_CONTENT = ["json", "pickle"]
CELERY_TASK_ROUTES = {
    # With this setup we'll have two queue:
    # 'import_worker' for our long running import tasks and
    # 'celery' which is the default queue. Everything else
    # will end up there. We could do fancier stuff.
    # NB: you also need to look in 15_daemonize_celery.config
    # to add a worker process for each queue.
    # See https://hackernoon.com/using-celery-with-multiple-queues-retries-and-scheduled-tasks-589fe9a4f9ba
    "feedback.tasks.import_feedback": {"queue": "import_worker"},
}

LOGIN_URL = "/app/accounts/login/"
LOGOUT_REDIRECT_URL = "marketing-home"

INTERCOM_APP_ID = "lhrjf782"  # Not secret. Used for widget.
INTERCOM_CLIENT_ID = os.environ["INTERCOM_CLIENT_ID"]
INTERCOM_CLIENT_SECRET = os.environ["INTERCOM_CLIENT_SECRET"]

SLACK_CLIENT_SECRET = os.environ["SLACK_CLIENT_SECRET"]
SLACK_CLIENT_ID = os.environ["SLACK_CLIENT_ID"]
SLACK_SIGNING_SECRET = os.environ["SLACK_SIGNING_SECRET"]

HELPSCOUT_CLIENT_ID = os.environ["HELPSCOUT_CLIENT_ID"]
HELPSCOUT_CLIENT_SECRET = os.environ["HELPSCOUT_CLIENT_SECRET"]
HELPSCOUT_WEBHOOK_SIGNING_KEY = os.environ["HELPSCOUT_WEBHOOK_SIGNING_KEY"]

STORYBLOK_API_TOKEN = os.environ["STORYBLOK_API_TOKEN"]

PLAN_TIERED = "plan_H0mfouAFXGWOGc"
PLAN_EARLY_ADOPTER_20_PER_USER = "plan_El2pYaCzTgKQSi"
PLAN_SMB_49_PER_USER = "plan_Gh1UcIDLlkqntF"
PLAN_MID_99_PER_USER = "plan_Gh1Tct1NT6ncGK"

PLAN_1_USER_FREE = "price_1GyO6VCZ3jbVsfoGhvgEnyAU"
PLAN_3_USERS_25 = "price_1GvX2kCZ3jbVsfoGOf8wWyEs"
PLAN_UNLIMITED_USERS_49 = "price_1GvX2jCZ3jbVsfoG2XwUoSKh"
PLAN_LIFETIME_APPSUMO_99 = "price_1Ha40jCZ3jbVsfoGRt1q5FYT"

# Increase from default to avoid errors from large Help Scout webhooks
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "www/static")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "vendor"),
    os.path.join(BASE_DIR, "static"),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {"format": "{levelname} {message}", "style": "{",},
    },
    "filters": {"require_debug_true": {"()": "django.utils.log.RequireDebugTrue",},},
    "handlers": {
        "null": {"class": "logging.NullHandler",},
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "integrations.intercom.views": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
        },
        "integrations.shared.importers": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
        },
        "events": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "filters": ["require_debug_true"],
        },
        "django.security.DisallowedHost": {"handlers": ["null"], "propagate": False,},
    },
}
